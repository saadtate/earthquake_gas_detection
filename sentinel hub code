// VERSION=3

function setup() {
    return {
        input: ["B03", "B11", "B04", "B02", "B8A", "SCL", "dataMask"],
        output: [
            { id: "default", bands: 4 },
            { id: "index", bands: 1, sampleType: "FLOAT32" },
            { id: "eobrowserStats", bands: 2, sampleType: "FLOAT32" },
            { id: "dataMask", bands: 1 },
        ],
    };
}

function evaluatePixel(samples) {
    let val = index(samples.B8A, samples.B11);
    const NGDR = index(samples.B03, samples.B04);
    const bRatio = (samples.B03 - 0.175) / (0.39 - 0.175);
    const cloudCondition = bRatio > 1 || (bRatio > 0 && NGDR > 0);
    const isCloudCondition = isCloud(samples.SCL);

    // If it's detected as a cloud and moisture is low, it's treated as a gas.
    if (cloudCondition && isCloudCondition && val < -0.14) {
        return {
            default: [1, 0, 0, samples.dataMask], // Red for gas
            index: [val],
            eobrowserStats: [val, 1],
            dataMask: [samples.dataMask]
        };
    } else {
        return {
            default: [0, 0, 0, 0], // Transparent for others
            index: [val],
            eobrowserStats: [val, 0],
            dataMask: [samples.dataMask]
        };
    }
}

function isCloud(scl) {
    if (scl == 3) {
        // SC_CLOUD_SHADOW
        return false;
    } else if (scl == 9) {
        // SC_CLOUD_HIGH_PROBA
        return true;
    } else if (scl == 8) {
        // SC_CLOUD_MEDIUM_PROBA
        return true;
    } else if (scl == 7) {
        // SC_CLOUD_LOW_PROBA
        return false;
    } else if (scl == 10) {
        // SC_THIN_CIRRUS
        return true;
    } else if (scl == 11) {
        // SC_SNOW_ICE
        return false;
    } else if (scl == 1) {
        // SC_SATURATED_DEFECTIVE
        return false;
    } else if (scl == 2) {
        // SC_DARK_FEATURE_SHADOW
        return false;
    }
    return false;
}
